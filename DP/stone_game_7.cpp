#include <bits/stdc++.h>
using namespace std;
using namespace std::chrono;
#define dbg(x) cerr<<#x<<" = "<<x<<endl


class Solution1 {
public:

    vector<int>pre;
    int n;

    vector<vector<int>>dp;

    int solve(int i, int j) {
        if(i > j) return 0;

        if(dp[i][j] != -1) {
            return dp[i][j];
        }
        if(((n & 1) and ((j - i - 1) & 1)) or (n % 2 == 0 and (j - i -1) % 2 == 0)) {
            return dp[i][j] = max(solve(i + 1, j) + pre[j] - pre[i], solve(i, j - 1) + pre[j - 1] - pre[i-1]);
        }

        return dp[i][j] = min(solve(i + 1, j) - (pre[j] - pre[i]), solve(i, j - 1) - (pre[j - 1] - pre[i-1]));
    }

    int stoneGameVII(vector<int>& stones) {
        n =  stones.size();
        dp = vector<vector<int>>(n + 1, vector<int>(n + 1, -1));
        pre = vector<int>(n + 1, 0);

        for(int i = 1; i<=n; i++) {
            pre[i] = pre[i-1] + stones[i-1];
        }

        return solve(1, n);
    }
};

class Solution {
public:

    int n;
    vector<int>stones;
    vector<vector<int>>dp;
    int solve(int i, int j) {
        if(i > j) return 0;
        if(dp[i][j] != -1) {
            return dp[i][j];
        }
        if(((n & 1) and ((j - i - 1) & 1)) or (n % 2 == 0 and (j - i -1) % 2 == 0)) {
            return dp[i][j] = max(solve(i + 1, j), solve(i, j - 1));
        }

        return dp[i][j] = min(solve(i + 1, j) + stones[i], solve(i, j - 1) +  stones[j]);
    }

    int stoneGameVII(vector<int>& stones) {
        n = stones.size();
        dp = vector<vector<int>>(n + 1, vector<int>(n + 1, -1));
        this->stones = stones;
        return solve(0, n-1);
    }
};

signed main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    #ifndef ONLINE_JUDGE 
        freopen("input.txt","r",stdin);
        freopen("output.txt","w",stdout);
        freopen("error.txt", "w", stderr);
    #endif

    auto start = high_resolution_clock::now();
    
    Solution sol;
    vector<int>stones = {
95,
450,
508,
497,
895,
138,
938,
856,
435,
875,
875,
516,
207,
532,
142,
866,
969,
971,
348,
886,
31,
702,
838,
797,
579,
698,
169,
601,
492,
711,
548,
14,
107,
287,
827,
588,
241,
874,
720,
768,
689,
922,
587,
866,
417,
395,
795,
239,
477,
359,
330,
689,
148,
674,
331,
363,
700,
24,
451,
779,
208,
83,
727,
421,
348,
456,
575,
951,
138,
193,
921,
978,
230,
366,
115,
589,
783,
551,
803,
779,
399,
86,
385,
267,
950,
991,
870,
847,
985,
645,
235,
771,
460,
57,
668,
782,
637,
802,
710,
870,
470,
118,
380,
260,
257,
801,
724,
987,
162,
675,
266,
584,
10,
301,
16,
854,
892,
148,
375,
748,
923,
424,
630,
409,
987,
59,
834,
455,
265,
324,
568,
338,
781,
20,
243,
178,
355,
106,
213,
991,
741,
845,
833,
437,
671,
380,
612,
64,
175,
106,
727,
324,
329,
265,
875,
863,
368,
42,
213,
540,
919,
544,
199,
979,
852,
53,
621,
741,
156,
548,
81,
660,
889,
521,
879,
235,
172,
775,
931,
880,
262,
29,
126,
323,
809,
125,
215,
597,
239,
250,
387,
656,
938,
415,
35,
601,
212,
311,
184,
367,
240,
597,
924,
371,
627,
781,
271,
509,
580,
101,
725,
339,
644,
974,
379,
862,
362,
141,
702,
744,
498,
278,
40,
488,
840,
887,
50,
588,
53,
301,
713,
897,
883,
12,
232,
938,
660,
848,
242,
409,
735,
898,
946,
637,
766,
259,
234,
413,
869,
93,
81,
733,
802,
735,
592,
43,
798,
90,
129,
444,
791,
543,
596,
973,
432,
173,
751,
616,
160,
856,
984,
671,
609,
938,
336,
134,
938,
738,
572,
416,
269,
27,
120,
436,
432,
15,
472,
557,
125,
535,
684,
284,
319,
938,
803,
369,
987,
565,
137,
992,
121,
341,
419,
27,
712,
707,
85,
602,
547,
421,
969,
422,
264,
118,
529,
834,
309,
652,
81,
148,
891,
303,
963,
678,
228,
538,
819,
836,
626,
864,
298,
881,
72,
611,
270,
238,
619,
687,
614,
829,
757,
708,
604,
498,
375,
8,
914,
246,
1000,
689,
719,
429,
96,
458,
354,
888,
463,
446,
205,
964,
829,
11,
825,
285,
407,
375,
197,
440,
766,
700,
456,
18,
117,
237,
771,
288,
60,
484,
111,
937,
440,
954,
892,
492,
276,
166,
171,
242,
792,
445,
142,
320,
710,
664,
609,
342,
396,
2,
79,
816,
424,
852,
142,
121,
429,
421,
457,
848,
562,
838,
210,
118,
217,
659,
298,
626,
873,
640,
292,
455,
576,
552,
8,
838,
491,
468,
950,
35,
457,
96,
246,
679,
97,
739,
499,
442,
332,
381,
956,
802,
427,
186,
346,
208,
665,
737,
304,
941,
192,
711,
725,
984,
792,
213,
980,
827,
24,
970,
477,
243,
559,
265,
14,
47,
301,
852,
447,
973,
34,
375,
118,
739,
419,
694,
229,
614,
417,
416,
45,
378,
863,
48,
929,
182,
675,
178,
556,
426,
938,
55,
21,
893,
636,
217,
685,
578,
119,
871,
686,
177,
422,
300,
929,
922,
427,
574,
322,
65,
186,
407,
659,
490,
605,
333,
640,
680,
456,
542,
138,
216,
380,
594,
990,
866,
531,
594,
590,
3,
586,
991,
940,
221,
152,
300,
688,
951,
918,
738,
48,
834,
555,
808,
710,
331,
646,
921,
445,
42,
174,
929,
312,
667,
730,
813,
19,
724,
867,
882,
82,
842,
761,
23,
54,
376,
751,
476,
346,
456,
13,
216,
809,
286,
574,
720,
817,
68,
929,
567,
989,
506,
524,
655,
404,
90,
215,
658,
386,
392,
958,
82,
715,
222,
82,
876,
222,
629,
320,
98,
428,
27,
938,
943,
875,
520,
958,
541,
665,
316,
120,
964,
239,
800,
745,
350,
683,
473,
232,
130,
467,
566,
61,
334,
151,
610,
827,
781,
321,
821,
167,
173,
886,
228,
135,
309,
154,
359,
872,
794,
453,
458,
650,
476,
924,
873,
556,
149,
270,
779,
144,
955,
209,
230,
407,
773,
898,
201,
305,
389,
454,
884,
777,
137,
953,
114,
11,
288,
8,
682,
706,
387,
99,
510,
137,
889,
731,
235,
722,
808,
998,
902,
450,
93,
145,
761,
485,
767,
856,
846,
693,
280,
656,
709,
215,
855,
779,
310,
111,
67,
320,
884,
709,
799,
322,
756,
955,
705,
342,
554,
23,
980,
809,
588,
653,
355,
646,
582,
832,
161,
172,
691,
115,
756,
250,
738,
392,
844,
457,
743,
736,
488,
550,
777,
137,
340,
537,
434,
701,
252,
999,
252,
239,
73,
847,
839,
593,
386,
709,
772,
252,
202,
206,
193,
574,
90,
610,
463,
367,
603,
611,
177,
692,
245,
641,
443,
599,
895,
63,
599,
296,
735,
734,
49,
122,
758,
524,
633,
533,
915,
65,
721,
115,
434,
889,
778,
253,
160,
984,
707,
184,
200,
677,
630,
333,
333,
808,
194,
679,
674,
447,
794,
893,
884,
389,
134,
14,
441,
714,
581,
237,
886,
189,
265,
285,
122,
41,
127,
824,
690,
578,
468,
978,
124,
369,
677,
439,
959,
210,
891,
253,
562,
33,
734,
947,
983,
58,
899,
539,
305,
599,
212,
940,
21,
491,
887,
941,
825,
222,
949,
274,
783,
910,
48,
103,
340,
766,
773,
323,
637,
890,
177,
842,
565,
348,
562,
36,
704,
415,
952,
726,
976,
28,
346,
81,
566,
403,
347,
858,
152,
989,
801,
561,
615,
523,
115,
770,
41,
434,
622,
406,
857,
50,
187,
21,
490,
12,
287,
632,
282,
149,
242,
2,
709,
672,
244,
380,
477,
525,
154,
320,
878,
181,
103,
60,
355,
21,
618,
223,
702,
558,
999,
152,
778,
536,
998,
63,
352,
37,
469,
815,
599,
708,
278,
886,
855,
452,
51,
565,
299,
971,
475,
424,
660,
423,
407
};
    cout << sol.stoneGameVII(stones) << "\n";

    auto stop = high_resolution_clock::now();
    auto duration = duration_cast<microseconds>(stop - start);
    cout << "Time taken by function: "
         << duration.count() << " microseconds" << endl;

    return 0;
}