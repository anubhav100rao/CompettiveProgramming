#include <bits/stdc++.h>
using namespace std;
#define dbg(x) cerr<<#x<<" = "<<x<<endl

class Solution {
public:
    vector<vector<int>>adj;  
    vector<bool>visited;

    vector<set<int>>components;
    
    void dfs(int node, set<int>&comp) {
        visited[node] = true;
        comp.insert(node);
        for(int &child: adj[node]) {
            if(!visited[child]) {
                dfs(child, comp);
            }
        }
    }

    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        adj = vector<vector<int>>(n);
        visited = vector<bool>(n, false);
        for(int i = 0; i<n; i++) {
            for(int j = 0; j<n; j++) {
                if(graph[i][j])
                    adj[i].push_back(j);
            }
        }
        sort(initial.begin(), initial.end());

        if(initial.size() == 1)
            return initial[0];

        for(int i = 0; i<n; i++) {
            if(!visited[i]) {
                set<int>comp;
                dfs(i, comp);
                components.push_back(comp);
            }
        }

        vector<pair<int, int>>candidates;


        for(set<int>&comp: components) {
            int cnt = 0, curr = 0;
            for(int &node: initial) {
                if(comp.count(node)) {
                    cnt++;
                    curr = node;
                }
            }
            if(cnt == 1) {
                candidates.push_back({comp.size(), curr});
            }
        }

        sort(candidates.begin(), candidates.end(), [&](const auto a, const auto b) {
            if(a.first == b.first)
                return a.second < b.second;
            return a.first < b.first;
        });
        int node = initial[0], mx = INT_MIN;

        if(candidates.size() == 0)
            return initial[0];

        for(auto [a, b]: candidates) {
            if(a > mx) {
                mx = a;
                node = b;
            }
            cout << a << " " << b << "\n";
        }
        

        return node;

    }
};

class BruteForce {
public:
    vector<vector<int>>adj;  
    vector<bool>visited;

    void dfs(int node) {
        visited[node] = true;
        for(int &child: adj[node]) {
            if(!visited[child]) {
                dfs(child);
            }
        }
    }

    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        sort(initial.begin(), initial.end());
        int n = graph.size();
        adj = vector<vector<int>>(n);
        visited = vector<bool>(n, false);
        for(int i = 0; i<n; i++) {
            for(int j = 0; j<n; j++) {
                if(graph[i][j])
                    adj[i].push_back(j);
            }
        }

        if(initial.size() == 1)
            return initial[0];

        int sz_init = initial.size();
        vector<int>ans(n, INT_MAX);

        for(int i = 0; i<sz_init; i++) {
            visited = vector<bool>(n, false);
            for(int j = 0; j<sz_init; j++) {
                if(i == j)
                    continue;
                if(!visited[initial[j]]) {
                    dfs(initial[j]);
                }
            }
            ans[initial[i]] = count(visited.begin(), visited.end(), true);
        }

        int node = 0, mn = INT_MAX;

        for(int i = 0; i<sz_init; i++) {
            if(ans[initial[i]] < mn) {
                mn = ans[initial[i]];
                node = initial[i];
            }
        }

        return node;

    }
};



signed main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    #ifndef ONLINE_JUDGE 
        freopen("input.txt","r",stdin);
        freopen("output.txt","w",stdout);
        freopen("error.txt", "w", stderr);
    #endif
 
    return 0;
}